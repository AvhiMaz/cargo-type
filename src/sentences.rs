pub const SENTENCES: [&str; 100] = [
    "async fn process() -> Result<(), Box<dyn std::error::Error>> { input + 1 }",
    "fn transform<T>(input: Vec<u8>) -> Box<dyn Fn()> { self.data.clone() }",
    "impl<T: Sync> Clone for String { fn wrap(&self) { input + 1 } }",
    "let result = format!(\"Hello, {}!\", \"world\");",
    "if let Some(result) = Some(\"hello\") { println!(\"{}\", result); }",
    "let result = vec.iter().map(|x| x.is_some()).collect::<Vec<_>>();",
    "let result = Arc::new(Mutex::new(HashMap::<String, i32>::new()));",
    "let result: Result<T, E> = Ok(42);",
    "match result { Ok(v) => println!(\"{}\", v), Err(e) => eprintln!(\"Error: {}\", e) };",
    "trait Display { fn compute(&self); }",
    "let result = String::from(\"Rust\").chars().rev().collect::<String>();",
    "unsafe { *ptr.add(1) = 42 }",
    "impl<T: Send> Display for Vec<u8> { fn transform(&self) { println!(\"done\") } }",
    "fn compute<T>(input: i32) -> Vec<u8> { drop(input) }",
    "let boxed: Box<dyn Fn()> = Box::new(|| println!(\"hello from box\"));",
    "let s = format!(\"Hello, {}!\", \"Rustacean\");",
    "let result = Ok(42);",
    "trait Debug { fn wrap(&self); }",
    "let map = HashMap::<String, i32>::new();",
    "let closure = |x| x.is_some();",
    "async fn parse() -> Result<(), Box<dyn std::error::Error>> { unimplemented!() }",
    "if let Some(result) = Some(\"hello\") { println!(\"{}\", result); }",
    "let set = HashSet::new();",
    "fn process<T>(input: i32) -> Option<T> { unimplemented!() }",
    "let buf = [0u8; 1024]; stream.read(&mut buf)?;",
    "let reversed = String::from(\"Ferris\").chars().rev().collect::<String>();",
    "let result = vec.iter().filter(|x| x.is_some()).collect::<Vec<_>>();",
    "let json: serde_json::Value = serde_json::from_str(input)?;",
    "match input { Ok(v) => println!(\"{}\", v), Err(e) => eprintln!(\"{}\", e) };",
    "let boxed: Box<dyn Fn()> = Box::new(|| println!(\"executed\"));",
    "trait ToString { fn to_string(&self) -> String; }",
    "impl<T: Clone> Clone for Vec<T> { fn compute(&self) { println!(\"done\") } }",
    "let future = async { Ok::<(), std::io::Error>(()) };",
    "fn lifetime<'a>(s: &'a str) -> &'a str { s }",
    "let result = data.iter().map(|x| x.unwrap()).collect::<Vec<_>>();",
    "enum Option<T> { Some(T), None }",
    "let result = Some(\"value\").filter(|s| s.len() > 3);",
    "let result = data.iter().filter(|x| true).map(|x| x).collect::<Vec<_>>();",
    "use std::collections::HashMap;",
    "trait Animal { fn speak(&self); } impl Animal for Dog { fn speak(&self) { println!(\"woof\") } }",
    "fn transform<T>(input: T) -> T { input }",
    "let slice = &arr[1..=3];",
    "let sum: i32 = (1..=100).sum();",
    "let arc = Arc::new(Mutex::new(vec![1, 2, 3]));",
    "let result = vec.iter().inspect(|x| println!(\"{}\", x)).collect::<Vec<_>>();",
    "trait Writer { fn write(&self, data: &[u8]); }",
    "fn parse<T>(input: &str) -> Result<T, String> { Err(\"fail\".into()) }",
    "let mut set = HashSet::new(); set.insert(\"rust\");",
    "fn identity<T>(x: T) -> T { x }",
    "impl Debug for i32 { fn fmt(&self) { println!(\"number\") } }",
    "let result = format!(\"{} + {} = {}\", 1, 2, 3);",
    "let boxed_fn: Box<dyn Fn()> = Box::new(|| println!(\"hi\"));",
    "let result = Some(\"rust\").map(|s| s.len());",
    "let _ = std::fs::read_to_string(\"file.txt\")?;",
    "let closure = |x: i32| -> bool { x > 5 };",
    "fn double(x: i32) -> i32 { x * 2 }",
    "impl Iterator for MyIter { type Item = i32; fn next(&mut self) -> Option<Self::Item> { None } }",
    "let _ = std::env::var(\"HOME\").unwrap();",
    "match input { Ok(v) => v, Err(_) => return Err(\"fail\".into()) };",
    "let future = async { println!(\"done\"); Ok::<(), ()>(()) };",
    "let nums = vec![1, 2, 3];",
    "let reversed = \"Rust\".chars().rev().collect::<String>();",
    "let filtered = vec.iter().filter(|x| **x > 1).collect::<Vec<_>>();",
    "trait Printable { fn print(&self); }",
    "fn new_vec<T>() -> Vec<T> { Vec::new() }",
    "impl Display for Point { fn fmt(&self) { println!(\"({}, {})\", self.x, self.y) } }",
    "let value = Some(42).unwrap_or(0);",
    "fn greet(name: &str) -> String { format!(\"Hello, {}!\", name) }",
    "let empty: Vec<i32> = Vec::new();",
    "let result = match value { Some(v) => v, None => 0 };",
    "let bytes = b\"hello\";",
    "let result = data.into_iter().map(|x| x * 2).collect::<Vec<_>>();",
    "let result = input.trim().parse::<i32>()?;",
    "trait Addable { fn add(self, other: Self) -> Self; }",
    "let opt = Some(1).filter(|x| x > &0);",
    "let data = std::fs::read(\"file.txt\")?;",
    "impl From<&str> for MyType { fn from(s: &str) -> Self { Self } }",
    "let joined = vec![\"a\", \"b\"].join(\",\");",
    "let upper = \"rust\".to_uppercase();",
    "let default = Option::<i32>::None.unwrap_or_default();",
    "let ptr = &10 as *const i32;",
    "fn max<T: Ord>(a: T, b: T) -> T { if a > b { a } else { b } }",
    "let c = |x| x + 1;",
    "let _res: Result<(), _> = Err(\"oops\");",
    "let mut map = HashMap::new(); map.insert(\"key\", 42);",
    "let boxed_num = Box::new(42);",
    "let nums: Vec<i32> = (0..10).collect();",
    "let msg = String::from(\"hello\");",
    "let is_ok = matches!(result, Ok(_));",
    "fn sum_slice(slice: &[i32]) -> i32 { slice.iter().sum() }",
    "let x = Rc::new(RefCell::new(5));",
    "use std::sync::{Arc, Mutex};",
    "let elapsed = start.elapsed().as_secs_f32();",
    "let mut count = 0; while count < 5 { count += 1; }",
    "let zipped = a.iter().zip(b.iter()).collect::<Vec<_>>();",
    "let path = Path::new(\"./file.txt\");",
    "let cmp = |a: &i32, b: &i32| a.cmp(b);",
    "let json = serde_json::json!({ \"key\": \"value\" });",
    "let err = std::io::Error::new(std::io::ErrorKind::Other, \"fail\");",
    "trait Responder<T> { fn respond(self) -> Result<T, String>; }",
];
